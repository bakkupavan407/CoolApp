{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/angmaterial.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/complaints/complaint.component.html","webpack:///./src/app/complaints/complaint.component.ts","webpack:///./src/app/complaints/complaint.service.ts","webpack:///./src/app/http-error-handler.service.ts","webpack:///./src/app/landing/landing.component.html","webpack:///./src/app/landing/landing.component.ts","webpack:///./src/app/message.service.ts","webpack:///./src/app/messages/messages.component.html","webpack:///./src/app/messages/messages.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;ACZqE;AAC5B;AAOzC;IAAA;IAAiC,CAAC;IAArB,iBAAiB;QAL7B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,iEAAe,EAAE,iEAAe,CAAC;YAC3C,OAAO,EAAE,CAAC,iEAAe,EAAE,iEAAe,CAAC;SAC5C,CAAC;OAEW,iBAAiB,CAAI;IAAD,wBAAC;CAAA;AAAJ;;;;;;;;;;;;ACR9B,mB;;;;;;;;;;;ACAA,gHAAgH,OAAO,iCAAiC,OAAO,+W;;;;;;;;;;;;;;;;;;;;;;;;;ACA7G;AACb;AAOrC;IACI,sBAAoB,YAAkB;QAAlB,iBAAY,GAAZ,YAAY,CAAM;QACtC,cAAS,GAAa,EAAE,CAAC;QACzB,UAAK,GAAG,+BAA+B,CAAC;IAFE,CAAC;IAI3C,+BAAQ,GAAR;QACI,uEAAuE;QACvE,qDAAqD;QACrD,2BAA2B;QAC3B,MAAM;QACN,cAAc;QACd,+BAA+B;QAC/B,sBAAsB;QACtB,mCAAmC;QACnC,wBAAwB;QACxB,+BAA+B;QAC/B,+DAA+D;QAC/D,2BAA2B;QAC3B,qDAAqD;QACrD,2BAA2B;QAC3B,MAAM;IACV,CAAC;IArBQ,YAAY;QALxB,+DAAS,CAAC;YACP,QAAQ,EAAE,UAAU;;;SAGvB,CAAC;yCAEoC,kDAAI;OAD7B,YAAY,CAsBxB;IAAD,mBAAC;CAAA;AAtBwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AAEI;AACF;AACa;AAED;AAER;AACuB;AACJ;AAEF;AAEb;AACkB;AAEN;AACb;AAElD,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,4EAAgB,EAAE;IACzC,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,kFAAkB,EAAE;CACtD,CAAC;AAwBF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAtBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,kFAAkB;gBAClB,4EAAgB;aACjB;YACD,OAAO,EAAE;gBACL,uEAAa;gBACb,0DAAW;gBACX,qEAAgB;gBAChB,wDAAU;gBACV,+DAAiB;gBACjB,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC;aAC/B;YACD,SAAS,EAAE;gBACT,8EAAgB;gBAChB,4EAAgB;gBAChB,gEAAc;gBACd,+EAAiB;aAClB;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AChDtB,kD;;;;;;;;;;;;;;;;;;;;;;;;;;ACA0D;AACrB;AAGkB;AAOvD;IAEI,4BAAoB,YAAkB,EAAU,gBAAkC;QAA9D,iBAAY,GAAZ,YAAY,CAAM;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClF,cAAS,GAAa,EAAE,CAAC;IAD6D,CAAC;IAGvF,qCAAQ,GAAR;QACI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,uBAAuB;IAC3B,CAAC;IAED,0CAAa,GAAb;QACI,IAAM,IAAI,GAAG,QAAQ,CAAC;QACtB,IAAM,KAAK,GAAG,kBAAkB,CAAC;QACjC,IAAM,MAAM,GAAG,UAAU,CAAC;QAC1B,IAAM,MAAM,GAAG,eAAe,CAAC;QAC/B,IAAM,UAAU,GAAG,uDAAuD,CAAC;QAE3E,IAAM,IAAI,GAAc;YACpB,EAAE,EAAE,CAAC;YACL,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;YACd,UAAU,EAAE,UAAU;SACzB,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC;aACnC,SAAS,CAAC,cAAI;YACX,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,6CAAgB,GAAhB;QACI,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;aACnC,SAAS,CAAC,oBAAU;YACjB,OAAO,CAAC,GAAG,CAAC,kBAAgB,UAAY,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACX,CAAC;IAED,6CAAgB,GAAhB,UAAiB,GAAQ;QACrB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAAC;aACtC,SAAS,CAAC,mBAAS;YAChB,OAAO,CAAC,GAAG,CAAC,sBAAoB,SAAW,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACX,CAAC;IA7CQ,kBAAkB;QAL9B,+DAAS,CAAC;YACP,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,CAAE,mEAAgB,CAAE;;SAElC,CAAC;yCAGoC,kDAAI,EAA4B,mEAAgB;OAFzE,kBAAkB,CA8C9B;IAAD,yBAAC;CAAA;AA9C8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXY;AACgC;AAI/B;AAGkC;AAE9E,IAAM,WAAW,GAAG;IAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,eAAe;KACjC,CAAC;CACL,CAAC;AAGF;IAGI,0BAAoB,IAAgB,EAChC,gBAAkC;QADlB,SAAI,GAAJ,IAAI,CAAY;QAE5B,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAC/E,CAAC;IAED,uCAAY,GAAZ,UAAc,SAAc;QACxB,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,SAAS,EAAE,WAAW,CAAC;aACpE,IAAI,CACD,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAC1D,CAAC;IACN,CAAC;IAED,2CAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gCAAgC,EAAE,WAAW,CAAC;aAClE,IAAI,CACD,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CACvD,CAAC;IACN,CAAC;IAED,2CAAgB,GAAhB,UAAiB,GAAQ;QACrB,IAAI,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAE3B,WAAW,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAEjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gCAAgC,EAAE,WAAW,CAAC;aAClE,IAAI,CACD,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CACvD,CAAC;IACN,CAAC;IAjCQ,gBAAgB;QAD5B,gEAAU,EAAE;yCAIiB,+DAAU;YACd,4EAAgB;OAJ7B,gBAAgB,CAkC5B;IAAD,uBAAC;CAAA;AAlC4B;;;;;;;;;;;;;;;;;;;;;;;;;;AClBc;AAGL;AAQtC,gCAAgC;AAEhC;IACE;QAAA,iBAAiB;QAEjB,8EAA8E;QAC9E,sBAAiB,GAAG,UAAC,WAAgB;YAAhB,8CAAgB;YAAK,iBACvC,SAAuB,EAAE,MAAgB;gBAAzC,mDAAuB;gBAAE,kCAAS,EAAO;gBAAK,YAAI,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC;YAAhD,CAAgD;QADvD,CACuD,CAAC;IAJlF,CAAC;IAMjB;;;;;;OAMG;IACH,sCAAW,GAAX,UAAgB,WAAgB,EAAE,SAAuB,EAAE,MAAgB;QAA3D,8CAAgB;QAAE,mDAAuB;QAAE,kCAAS,EAAO;QAEzE,MAAM,CAAC,UAAC,KAAwB;YAC9B,wDAAwD;YACxD,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAyB;YAE/C,IAAM,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,YAAY,UAAU,CAAC,CAAC,CAAC;gBACnD,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACtB,0BAAwB,KAAK,CAAC,MAAM,qBAAe,KAAK,CAAC,KAAK,OAAG,CAAC;YAEnE,8DAA8D;YAChE,gFAAgF;YAE9E,uDAAuD;YACvD,MAAM,CAAC,+CAAE,CAAE,MAAM,CAAE,CAAC;QACtB,CAAC,CAAC;IAEJ,CAAC;IA/BU,gBAAgB;QAD5B,gEAAU,EAAE;;OACA,gBAAgB,CAgC5B;IAAD,uBAAC;CAAA;AAhC4B;AAmC7B;;;;EAIE;;;;;;;;;;;;ACpDF,4D;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AAM1C;IACE;IAAe,CAAC;IADL,gBAAgB;QAJ5B,+DAAS,CAAC;YACT,QAAQ,EAAE,SAAS;;SAEpB,CAAC;;OACW,gBAAgB,CAE5B;IAAD,uBAAC;CAAA;AAF4B;;;;;;;;;;;;;;;;;;;;;;ACNc;AAG3C;IADA;QAEE,aAAQ,GAAa,EAAE,CAAC;IAS1B,CAAC;IAPC,4BAAG,GAAH,UAAI,OAAe;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,8BAAK,GAAL;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IATU,cAAc;QAD1B,gEAAU,EAAE;OACA,cAAc,CAU1B;IAAD,qBAAC;CAAA;AAV0B;;;;;;;;;;;;ACH3B,mQAAmQ,SAAS,gC;;;;;;;;;;;;;;;;;;;;;;;;;ACAlO;AACU;AAMpD;IACE,2BAAmB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAD1C,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;SAEzB,CAAC;yCAEmC,+DAAc;OADtC,iBAAiB,CAE7B;IAAD,wBAAC;CAAA;AAF6B;;;;;;;;;;;;;;ACP9B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AACvC;AAElB,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { MatButtonModule, MatSliderModule } from '@angular/material';\r\nimport { NgModule } from '@angular/core';\r\n \r\n@NgModule({\r\n  imports: [MatButtonModule, MatSliderModule],\r\n  exports: [MatButtonModule, MatSliderModule]\r\n})\r\n \r\nexport class AngMaterialModule { }","module.exports = \"\"","module.exports = \"<!-- <h1>Application says what is??</h1>\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let value of apiValues\\\">{{value}}</li>\\r\\n</ul>\\r\\n -->\\r\\n <h1>{{title}}</h1>\\r\\n <ul>\\r\\n   <li>\\r\\n     <a href=\\\"/\\\">Home</a>\\r\\n   </li>\\r\\n   <li>\\r\\n    <a href=\\\"/complaints\\\">Complaints</a>\\r\\n  </li>\\r\\n </ul>\\r\\n <div>\\r\\n <button mat-raised-button color=\\\"warn\\\">Warn</button>\\r\\n  <br />\\r\\n    <div class=\\\"mat-app-background\\\">\\r\\n      <mat-slider></mat-slider>\\r\\n    </div>\\r\\n  </div>\\r\\n <router-outlet></router-outlet>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n    constructor(private _httpService: Http) { }\r\n    apiValues: string[] = [];\r\n    title = \"Blog, Complaints and More....\";\r\n    \r\n    ngOnInit() {\r\n        // this._httpService.get('/api/complaint/getall').subscribe(values => {\r\n        //     // this.apiValues = values.json() as string[];\r\n        //     console.log(values);\r\n        // });\r\n        // this.add();\r\n        // this._httpService.post('', {\r\n        //     name: \"Rakesh\",\r\n        //     email: \"rakesh10@gmail.com\",\r\n        //     mobile: 77777777,\r\n        //     reqsub: \"No Foot Paths\",\r\n        //     reqmessage: \"No Foot Paths near bus stop in kukatpally.\"\r\n        // }).subscribe(values => {\r\n        //     // this.apiValues = values.json() as string[];\r\n        //     console.log(values);\r\n        // });\r\n    }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http'; \n\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { ComplaintComponent } from './complaints/complaint.component';\nimport { ComplaintService } from './complaints/complaint.service';\n\nimport { HttpErrorHandler } from './http-error-handler.service';\n\nimport { MessageService } from './message.service';\nimport { MessagesComponent }    from './messages/messages.component';\n\nimport { LandingComponent } from './landing/landing.component';\nimport { AngMaterialModule } from './angmaterial';\n\nconst routes: Routes = [\n  { path: '', component: LandingComponent },\n  { path: 'complaints', component: ComplaintComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ComplaintComponent,\n    LandingComponent\n  ],\n  imports: [\n      BrowserModule,\n      FormsModule,\n      HttpClientModule,\n      HttpModule,\n      AngMaterialModule,\n      RouterModule.forRoot(routes)\n  ],\n  providers: [\n    ComplaintService,\n    HttpErrorHandler,\n    MessageService,\n    MessagesComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<h1>this is complaint html</h1>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\n\r\nimport { Complaint } from './complaint';\r\nimport { ComplaintService } from './complaint.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    providers: [ ComplaintService ],\r\n    templateUrl: './complaint.component.html'\r\n})\r\nexport class ComplaintComponent implements OnInit {\r\n    public allcomplaints: Complaint[];  \r\n    constructor(private _httpService: Http, private complaintservice: ComplaintService) { }\r\n    apiValues: string[] = [];\r\n    \r\n    ngOnInit() {\r\n        this.getComplaintById(7);\r\n        this.getAllComplaints();\r\n        //this.saveComplaint();\r\n    }\r\n\r\n    saveComplaint(): void {\r\n        const name = \"rakesh\";\r\n        const email = \"rakesh@gmail.com\";\r\n        const mobile = 7382476952;\r\n        const reqsub = \"No Foot Paths\";\r\n        const reqmessage = \"Please solve foot paths problems as early as possible\";\r\n\r\n        const comp: Complaint = {\r\n            id: 0,\r\n            name: name,\r\n            email: email,\r\n            mobile: mobile,\r\n            reqsub: reqsub,\r\n            reqmessage: reqmessage\r\n        };\r\n\r\n        this.complaintservice.addComplaint(comp)\r\n            .subscribe(hero => {\r\n                console.log(hero);\r\n            });\r\n    }\r\n\r\n    getAllComplaints() {\r\n        this.complaintservice.getAllComplaints()\r\n            .subscribe(complaints => {\r\n                console.log(`all requests ${complaints}`);\r\n            });\r\n    }\r\n\r\n    getComplaintById(cid: any) {\r\n        this.complaintservice.getComplaintById(cid)\r\n            .subscribe(complaint => {\r\n                console.log(`complaint by id: ${complaint}`);\r\n            });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport {RequestOptions} from \"@angular/http\";\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { Complaint } from './complaint';\r\nimport { HttpErrorHandler, HandleError } from '../http-error-handler.service';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type':  'application/json',\r\n      'Authorization': 'my-auth-token'\r\n    })\r\n};\r\n\r\n@Injectable()\r\nexport class ComplaintService {\r\n    private handleError: HandleError;\r\n\r\n    constructor(private http: HttpClient,\r\n        httpErrorHandler: HttpErrorHandler) {\r\n            this.handleError = httpErrorHandler.createHandleError('HeroesService');\r\n    }\r\n\r\n    addComplaint (complaint: any) {\r\n        console.log(\"service --> \", complaint);\r\n        return this.http.post('api/complaint/Post01', complaint, httpOptions)\r\n        .pipe(\r\n            catchError(this.handleError('addComplaint', complaint))\r\n        );\r\n    }\r\n\r\n    getAllComplaints() {\r\n        return this.http.get('api/complaint/GetAllComplaints', httpOptions)\r\n        .pipe(\r\n            catchError(this.handleError('getAllComplaints', ''))\r\n        );\r\n    }\r\n\r\n    getComplaintById(cid: any) {\r\n        let myParams = new URLSearchParams();\r\n        myParams.append('id', cid);\r\n        \r\n        httpOptions['params'] = myParams;\r\n\r\n        return this.http.get('api/complaint/GetComplaintById', httpOptions)\r\n        .pipe(\r\n            catchError(this.handleError('getComplaintById', ''))\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\n// import { MessageService } from './message.service';\r\n\r\n/** Type of the handleError function returned by HttpErrorHandler.createHandleError */\r\nexport type HandleError =\r\n  <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\r\n\r\n/** Handles HttpClient errors */\r\n@Injectable()\r\nexport class HttpErrorHandler {\r\n  constructor() { }\r\n\r\n  /** Create curried handleError function that already knows the service name */\r\n  createHandleError = (serviceName = '') => <T>\r\n    (operation = 'operation', result = {} as T) => this.handleError(serviceName, operation, result);\r\n\r\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   * @param serviceName = name of the data service that attempted the operation\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  handleError<T> (serviceName = '', operation = 'operation', result = {} as T) {\r\n\r\n    return (error: HttpErrorResponse): Observable<T> => {\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      const message = (error.error instanceof ErrorEvent) ?\r\n        error.error.message :\r\n       `server returned code ${error.status} with body \"${error.error}\"`;\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n    //   this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\r\n\r\n      // Let the app keep running by returning a safe result.\r\n      return of( result );\r\n    };\r\n\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","module.exports = \"<h1>\\r\\n    This is landing page\\r\\n</h1>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'landing',\r\n  templateUrl: './landing.component.html'\r\n})\r\nexport class LandingComponent {\r\n  constructor() {}\r\n}","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n  messages: string[] = [];\r\n\r\n  add(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n\r\n  clear() {\r\n    this.messages = [];\r\n  }\r\n}","module.exports = \"<div *ngIf=\\\"messageService.messages.length\\\">\\r\\n    <h3>Messages</h3>\\r\\n    <button class=\\\"clear\\\" (click)=\\\"messageService.clear()\\\">clear</button>\\r\\n    <br>\\r\\n    <ol>\\r\\n      <li *ngFor='let message of messageService.messages'> {{message}} </li>\\r\\n    </ol>\\r\\n  </div>\"","import { Component } from '@angular/core';\r\nimport { MessageService } from '../message.service';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './messages.component.html'\r\n})\r\nexport class MessagesComponent {\r\n  constructor(public messageService: MessageService) {}\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}